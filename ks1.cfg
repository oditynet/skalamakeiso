%include /tmp/part-include
# Install Virtuozzo
cmdline
#cdrom
#install 


lang en_US.UTF-8

keyboard --vckeymap=us --xlayouts='us'

cep --disagree
rootpw --iscrypted $6$T4Prb0kAuFlSgJf/$3Ea9DyD5FGvsqCTJgPtAmpPaKmiCcG9k6Y7Jr.zo5DgSoMFFVj.vFuQFIN2yq8pSZzWw1EotD8EQ0FM6iEjrx0
auth  --useshadow  --passalgo=sha512
selinux --disabled
#services --disabled="chronyd"
timezone Europe/Moscow --isUtc --nontp
readykernel --disable-autoupdate
reboot
key "test"

%packages
#@^cloudserver
@base
@core
@ha
@high-availability
@vstorage
@vstorage-ui-agent
@vstorage-ui-backend
#@optional
@ps
@qemu
@readykernel
@templates
@vz
#@va-agent
chrony
r-virtualization-7-x86_64-ez
#va-agent-release
#va-agent-storage
#@anaconda-tools
kexec-tools
net-snmp
net-snmp-libs
net-snmp-agent-libs
vstorage-metadata-server
vstorage-ctl
vstorage-libs-shared
vstorage-chunk-server
vstorage-iscsi
vstorage-client
shaman
cpupools
pyparted
pstorage-scsi-target-utils
arptables
xtables_wdog_tmo
rmond
pdrs
ledmon
ipmitool
OpenIPMI-modalias
#ioctl
shim
grub2-efi

%end

%addon com_virtuozzo_readykernel

%end
%addon com_virtuozzo_eula

%end
%addon com_virtuozzo_vstorage

%end
%addon com_virtuozzo_license

%end
%addon com_redhat_kdump --enable --reserve-mb='auto'

%end


%anaconda
pwpolicy root --minlen=6 --minquality=50 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=50 --notstrict --nochanges --notempty
pwpolicy luks --minlen=6 --minquality=50 --notstrict --nochanges --notempty
%end

%pre --log=/root/ks-pre.log

exec < /dev/tty3 > /dev/tty3 2>&1
/bin/chvt 3

#!/bin/sh
DIR="/sys/block"
MAXBOOTSIZE=250
MINBOOTSIZE=10
PATH="/dev"

### Running a for loop on Disks available among one will be selected by user/admin for OS to Install ###
DISKS=`/usr/bin/lsblk -d -e 11,1 | /usr/bin/grep sd | /usr/bin/awk '{print $1}'`
echo
#echo "Доступные диски:"
for DEV in ${DISKS[@]} ; do
  if [ -b "/dev/$DEV" ] ; then
    SIZE=`/usr/bin/cat /sys/block/$DEV/size`
    GB=$(($SIZE/2**21))
    #printf "%s:%d|\t\t" $DEV $GB
    echo "-> "$DEV" "$GB"GB " 
   fi
done

echo
echo "(NOTE: Make sure that you have inserted two disks of same size to mirror the OS (To exit Press Ctrl+Alt+Del))" 

        read -p "Select the first mirrored OS drive (eg. sda):" bootdevice1
          size1=`/usr/bin/cat $DIR/$bootdevice1/size`
            if [[ "$size1" == "$size1" ]] ; then
              echo "#partitioning scheme generated in %pre for 3 drives" > /tmp/part-include
              echo "bootloader --location=mbr --driveorder=$bootdevice1" >> /tmp/part-include

	read -p "Format all disks(y/n):" er
          case $er in
            [yY] ) echo "clearpart  --all " >> /tmp/part-include; break;;
            [nN] ) echo "clearpart  --all --initlabel --disklabel=gpt --drives=$bootdevice1" >> /tmp/part-include; break;;
            * ) echo "Please answer Y(y) or N(n) to continue...";;
          esac

	read -p "Install R-virtualisation/R-storage(y/n):" er
          case $er in
            [yY] ) echo "container --ip=192.168.0.100 --hostname=va --special=va-mn --rootpw=password" >> /tmp/part-include
                   echo "container --ip=192.168.0.101 --hostname=vs --special=vstorage-ui --rootpw=password" >> /tmp/part-include
                   echo "install" >> /tmp/part-include; break;;
#                   echo "cdrom" >> /tmp/part-include; break;;
            [nN] ) break;;
            * ) echo "Please answer Y(y) or N(n) to continue...";;
          esac

               echo "Using default values for partition..."
	       s1=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep s1|/usr/bin/awk -F '=' '{print $2}'`
               read -p "Size / (etc 61440=60G) now=$s1:" s1
               if [[ $s1 == '' ]];then
		 s1=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep s1|/usr/bin/awk -F '=' '{print $2}'`
               fi
	       s2=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep s2|/usr/bin/awk -F '=' '{print $2}'`
               read -p "Size swap (etc 32768=32G,16384=16G) now=$s2:" s2
	       if [[ $s2 == '' ]];then
		 s2=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep s2|/usr/bin/awk -F '=' '{print $2}'`
               fi

               # final raid configurations
               echo "part /boot  --fstype=ext4 --size 1024 --asprimary     --ondrive=$bootdevice1" >> /tmp/part-include
               echo "part /boot/efi --fstype=efi --size 512 --asprimary     --ondrive=$bootdevice1" >> /tmp/part-include
               echo "part pv.1 --size 1 --grow     --asprimary     --ondrive=$bootdevice1" >> /tmp/part-include
               echo "volgroup virtuozzo pv.1" >> /tmp/part-include
               echo "logvol swap --vgname=virtuozzo --size=$s2 --name=swap --fstype=swap" >> /tmp/part-include
               echo "logvol / --vgname=virtuozzo --size=$s1 --name=root --fstype=ext4" >> /tmp/part-include
               echo "logvol /vz --vgname=virtuozzo --percent=100 --name=vz --fstype=ext4" >> /tmp/part-include
            else
              echo "Error !! found different size disks . Exiting..."
          /bin/sleep 3
            fi
mds_disk=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep mds_disk|/usr/bin/awk -F '=' '{print $2}'`
read -p "disk for MDS(now=$mds_disk):" mds_disk
if [[ $mds_disk == '' ]];then
 mds_disk=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep mds_disk|/usr/bin/awk -F '=' '{print $2}'`
fi
echo "$mds_disk" > /root/mds_disk

while true; do
ip1=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep ip1|/usr/bin/awk -F '=' '{print $2}'`
read -p "IP addr wan (now=$ip1):" ip11
if [[ $ip11 != '' ]];then
 ip1+=$ip11
fi
echo "$ip1" > /root/ip1

ip2=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep ip2|/usr/bin/awk -F '=' '{print $2}'`
read -p "MASK addr wan (now=$ip2):" ip2
if [[ $ip2 == '' ]];then
 ip2=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep ip2|/usr/bin/awk -F '=' '{print $2}'`
fi
echo "$ip2" > /root/ip2

ip3=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep ip3|/usr/bin/awk -F '=' '{print $2}'`
read -p "GATEWAY addr wan (now=$ip3):" ip3
if [[ $ip3 == '' ]];then
 ip3=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep ip3|/usr/bin/awk -F '=' '{print $2}'`
fi
echo "$ip3" > /root/ip3

ip4=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep ip4|/usr/bin/awk -F '=' '{print $2}'`
read -p "IP addr storage (now=$ip4):" ip44
if [[ $ip44 != '' ]];then
 ip4+=$ip44
fi
echo "$ip4" > /root/ip4

ip5=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep ip5|/usr/bin/awk -F '=' '{print $2}'`
read -p "MASK addr storage (now=$ip5):" ip5
if [[ $ip5 == '' ]];then
 ip5=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep ip5|/usr/bin/awk -F '=' '{print $2}'`
fi
echo "$ip5" > /root/ip5

echo $bootdevice1 > /root/sd1
          read -p "IP address is correct? (y/n):" partselect2

          case $partselect2 in
            [yY] )  break;;
            [nN] )  echo "Eneter new address";;
            * ) echo "Please answer Y(y) or N(n) to continue...";;
          esac
        done


echo "______________________Example____________________________ "
echo "                     Schema 1"
echo "ens3-"
echo "     | bond0->192.168.2.2/24"
echo "ens8-"
echo ""
echo "ens9--"
echo "      | bond1->vlan->br1400->172.29.0.2/24 "
echo "ens10-"

echo "__________________________________________________________"

echo "                     Schema 2(if fields 'bond1' is NULL and 'vlan' is NULL)"
echo "ens3-"
echo "     | bond0->192.168.2.2/24"
echo "ens8-"
echo "ens139f0s0->br1400->172.29.0.2/24 "
echo " "
echo "=========================================================="
echo "ATTENTION!!! After reboot run 'bash /root/network.sh'"



eth_list=$(/usr/bin/ls  /sys/class/net/|/usr/bin/grep -v lo)
for i in $eth_list; do
    eth_up=$(/usr/bin/nmcli -f capabilities.carrier-detect device show ${i}|/usr/bin/awk -F ':' '{print $2}')
    eth40g=$(/usr/bin/nmcli -f capabilities.speed device show ${i}|/usr/bin/awk -F ':' '{print $2}')
    echo "ethernet: " $i " | ip:up/down: " $eth_up " | speed: " $eth40g
done



while true; do

read -p "interface 1 for bond0(storage 192.168.100.0/24):" eth0
echo "$eth0" > /root/eth0
read -p "interface 2 for bond0:" eth1
echo "$eth1" > /root/eth1

read -p "interface 1 for bond1(if NULL,then bond1 not create):" eth10
echo "$eth10" > /root/eth10
read -p "interface 2 for bond1:" eth11
echo "$eth11" > /root/eth11

read -p "the name of br0:" eth2
echo "$eth2" > /root/eth2
read -p "interface for br0(bond1,ens130p1):" eth20
echo "$eth20" > /root/eth20
read -p "VLAN(if NULL, then bond1->br else br->vlan->bond1):" vlan
echo "$vlan" > /root/vlan
          read -p "Config is correct? (y/n):" partselect2

          case $partselect2 in
            [yY] )  break;;
            [nN] )  echo "Eneter new address";;
            * ) echo "Please answer Y(y) or N(n) to continue...";;
          esac
        done

read -p " 0-MDS master | 1-MDS slave | 2-MDS only register: " mds
echo "$mds" > /root/mds

mds_ipmaster=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep mds_ipmaster|/usr/bin/awk -F '=' '{print $2}'`
read -p "IP MDS master(now=$mds_ipmaster): " mds_ipmaster
if [[ $mds_ipmaster == '' ]];then
 mds_ipmaster=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep mds_ipmaster|/usr/bin/awk -F '=' '{print $2}'`
fi
echo "$mds_ipmaster" > /root/mds_ipmaster

namehost=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep namehost|/usr/bin/awk -F '=' '{print $2}'`
read -p "Enter ID of the hostname(hostname now=$namehost): " idhost
if [[ $idhost != '' ]];then
 namehost+=$idhost
fi
echo "$namehost" > /root/namehost

ntp=`/usr/bin/cat /run/install/repo/vars|/usr/bin/grep ntp|/usr/bin/awk -F '=' '{print $2}'`
echo "$ntp" > /root/ntp



/usr/bin/cp /run/install/repo/network.sh /root/
/usr/bin/cp -r /run/install/repo/update701335/ /root/
#/usr/bin/cp /run/install/repo/network.sh /mnt/sysimage/root/
#/usr/bin/cp -r /run/install/repo/update701335/ /mnt/sysimage/root/
#/usr/bin/cp /run/install/repo/network.sh /mnt/sysimage/
#/usr/bin/cp -r /run/install/repo/update701335/ /mnt/sysimage/

/usr/bin/cp /run/install/repo/mds.sh /root/

/usr/bin/cp /run/install/repo/cs-ssd-jrnl.pl /root/

#/usr/bin/cp /run/install/repo/mds.sh /mnt/sysimage/root/
#/usr/bin/cp /run/install/repo/mds.sh /mnt/sysimage/

/usr/bin/cp /run/install/repo/cs.sh /root/
#/usr/bin/cp /run/install/repo/cs.sh /mnt/sysimage/root/
#/usr/bin/cp /run/install/repo/cs.sh /mnt/sysimage/

/usr/bin/cp /run/install/repo/lic*.txt /root/
#/usr/bin/cp /run/install/repo/lic*.txt /mnt/sysimage/root/
#/usr/bin/cp /run/install/repo/lic*.txt /mnt/sysimage/


/bin/chvt 1

%end
%post

#!/bin/bash
LANG=en_US.utf8
set -x -v

echo "PermitRootLogin yes" >>/etc/ssh/sshd_config

#cat << EOF > /boot/efi/startup.nsh
#IF EXIST FS0:EFI\rosplatforma\grubx64.efi THEN
#FS0:
#EFI\rosplatforma\grubx64.efi
#ELSE
#FS1:
#EFI\rosplatforma\grubx64.efi
#ENDIF
#EOF



#  preparing disks
bootdevice1=$(cat /root/sd1)

HDDS=$(lsblk -ld -o NAME,ROTA,TRAN | grep -v loo|egrep -v "$bootdevice1|usb|sr0" | grep 1 | awk '{print $1}')
SSDS=$(lsblk -ld -o NAME,ROTA,TRAN | grep -v loo|egrep -v "$bootdevice1|usb|sr0" | grep 0 | awk '{print $1}')
echo $HDDS > /root/hdds
echo $SSDS > /root/ssds
CLUSTER=vstor001
echo $CLUSTER > /root/cluster

for i in $HDDS; do
#	wipefs -af /dev/${i}
        /usr/libexec/vstorage/prepare_vstorage_drive /dev/${i} --noboot -y
done

for i in $SSDS; do
	wipefs -af /dev/${i}
        /usr/libexec/vstorage/prepare_vstorage_drive /dev/${i} --noboot --ssd -y
done

mkdir -p /vstorage/${CLUSTER}

HDD_COUNT=0
for i in $HDDS; do
        mkdir -p /vstorage/${CLUSTER}-hdd${HDD_COUNT}
        echo "UUID=$(blkid -o value -s UUID /dev/${i}1) /vstorage/${CLUSTER}-hdd${HDD_COUNT} ext4 defaults,noatime,lazytime 0 0" >> /etc/fstab
        HDD_COUNT=$((${HDD_COUNT}+1))
done

SSD_COUNT=0
for i in $SSDS; do
        mkdir -p /vstorage/${CLUSTER}-ssd${SSD_COUNT}
        echo "UUID=$(blkid -o value -s UUID /dev/${i}1) /vstorage/${CLUSTER}-ssd${SSD_COUNT} ext4 defaults,noatime,lazytime,discard,nofail 0 0" >> /etc/fstab
        SSD_COUNT=$((${SSD_COUNT}+1))
done

dd if=/dev/sr0 of=/root/r-virt.iso

%end
